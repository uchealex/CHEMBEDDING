# -*- coding: utf-8 -*-
"""Putting it all together (PyTorch)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter2/section6_pt.ipynb
"""

from google.colab import files
uploaded = files.upload()  # Opens a file upload prompt

!pip install --upgrade sympy

import torch
import torch.nn as nn
import torch.optim as optim
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import pandas as pd
from torch.utils.data import DataLoader, Dataset

# Load the dataset
data_pd = pd.read_csv('SMILES_retentionTime.csv')

# Load tokenizer and model
checkpoint = "JuIm/SMILES_BERT"
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=1)  # Regression task

# Prepare the input sequences
sequences = data_pd['SMILES'].tolist()
retention_times = data_pd['retention_time'].values  # Retention time as target

# Tokenize SMILES sequences
model_inputs = tokenizer(sequences, padding=True, return_tensors="pt")

# Forward pass to get attention weights
with torch.no_grad():  # Disable gradient computation for efficiency
    outputs = model(**model_inputs, output_attentions=True)

# Extract the attention weights from the last layer
last_layer_attention = outputs.attentions[-1]  # Shape: (batch_size, num_heads, seq_len, seq_len)

# Convert retention times to a torch tensor
retention_times = torch.tensor(retention_times, dtype=torch.float32)

# Custom dataset for PyTorch DataLoader
class AttentionDataset(Dataset):
    def __init__(self, attention_weights, targets):
        self.attention_weights = attention_weights
        self.targets = targets

    def __len__(self):
        return len(self.targets)

    def __getitem__(self, idx):
        return self.attention_weights[idx], self.targets[idx]

# Create dataset and dataloaders
dataset = AttentionDataset(last_layer_attention, retention_times)
train_loader = DataLoader(dataset, batch_size=16, shuffle=True)

# Define a simple neural network model
class RetentionTimePredictor(nn.Module):
    def __init__(self, num_heads, seq_len):
        super(RetentionTimePredictor, self).__init__()
        self.conv1 = nn.Conv2d(num_heads, 32, kernel_size=3, padding=1)  # Convolution to extract patterns
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * seq_len * seq_len, 128)  # Fully connected layer
        self.fc2 = nn.Linear(128, 1)  # Output layer for regression

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = x.view(x.size(0), -1)  # Flatten
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)  # No activation, since it's regression
        return x

# Get dimensions from attention weights
batch_size, num_heads, seq_len, _ = last_layer_attention.shape

# Initialize the model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = RetentionTimePredictor(num_heads, seq_len).to(device)

# Loss and optimizer
criterion = nn.MSELoss()  # Mean Squared Error for regression
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    total_loss = 0.0

    for batch in train_loader:
        attention_batch, target_batch = batch
        attention_batch, target_batch = attention_batch.to(device), target_batch.to(device)

        optimizer.zero_grad()
        outputs = model(attention_batch)

        loss = criterion(outputs.squeeze(), target_batch)
        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader)
    print(f"Epoch {epoch + 1}/{num_epochs}, Loss: {avg_loss:.4f}")

print("Training complete!")

model.eval()  # Set the model to evaluation mode

import torch

# Tokenize the input SMILES sequences
model_inputs = tokenizer(data_pd['SMILES'].tolist(), padding=True, return_tensors="pt")
pretrained_model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=1)  # Regression task


# Run the model without computing gradients
with torch.no_grad():
    outputs = pretrained_model(**model_inputs, output_attentions=True)

# Extract the attention weights (last layer)
last_layer_attention = outputs.attentions[-1]  # Shape: (batch_size, num_heads, seq_len, seq_len)

# Move to correct device (CPU/GPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
attention_data = last_layer_attention.to(device)

# Get model predictions
predicted_retention_times = model(attention_data).detach().cpu().numpy().flatten()

import matplotlib.pyplot as plt

# Get actual values
actual_retention_times = data_pd['retention_time'].values

# Plot
plt.figure(figsize=(8, 6))
plt.scatter(actual_retention_times, predicted_retention_times, alpha=0.7)
plt.xlabel("Actual Retention Time")
plt.ylabel("Predicted Retention Time")
plt.title("Actual vs. Predicted Retention Time")
plt.plot([min(actual_retention_times), max(actual_retention_times)],
         [min(actual_retention_times), max(actual_retention_times)],
         color='red', linestyle='--')  # Ideal fit line
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

mae = mean_absolute_error(actual_retention_times, predicted_retention_times)
mse = mean_squared_error(actual_retention_times, predicted_retention_times)
r2 = r2_score(actual_retention_times, predicted_retention_times)

print(f"Mean Absolute Error (MAE): {mae:.4f}")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"RÂ² Score: {r2:.4f}")

import pandas as pd
data_pd = pd.read_csv("SMILES_retentionTime.csv")  # Adjust filename if needed
print(data_pd.head())  # Verify successful loading